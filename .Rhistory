myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
myVector
attributes(myVector)
myVector
typeof(myVector)
class(myVector)
myMatrix <- myVector
help(matrix)
?matrix
matrix(1:20,4,5)
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients=c("Bill","Gina","Kelly","Sean")
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData
myData <- data.frame(patients,myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData,cnames)
colnames(myData)<-cnames
myData
for i=1:20
if (3>2) {}
if (3>2) {rnorm()}
if (3>2) {rnorm(1)}
if (3>2) {print(rnorm(1)}
if (3>2) {print(rnorm(1))}
if (3<2) {print(rnorm(1))} else {print("nope")}
if (3<2) {print(rnorm(1))} else {"nope"}
y<- if (3<2) {print(rnorm(1))} else {"nope"}
y
y<- if (3>2) {print(rnorm(1))} else {"nope"}
y
return T
for(i in 1:20) {print(i)}
[1]
x <- c('a','b','c','d')
x
for ( i in seq_along(x)) {print(i)}
for ( i in seq_along(x)) {print i}
for ( i in seq_along(x)) {print(i)}
for (letter in x) {print(x)}
for (letter in x) {print(letter)}
for (letter in x) print(letter)
y <- if (T) {2} else {3}
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
a <-9
a++
a
a
++a
a
a+=1
a
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
fu()
fu
class(fu)
attr
attr(fu)
attr(fu,'info')
methods(fu)
methods(c)
help(c)
sd(rnorm(20))
sd(rnorm(200))
sd(rnorm(2000))
sd(rnorm(20000))
sd(rnorm(20000))
sd(rnorm(20000))
sd(rnorm(20000))
sd(rnorm(20000))
sd(rnorm(20000))
sd(rnorm(20000))
sd(c(0,1,2))
sd(c(0,1,2,3))
sd(c(0,1,2,3,NA))
Math.Date
Math.Date()
args(lm)
args(c)
args(print)
args(rnorm)
source('~/School/Coursera/DataScience/R/Week2/practice.R')
f()
source('~/School/Coursera/DataScience/R/Week2/practice.R')
source('~/School/Coursera/DataScience/R/Week2/practice.R')
f()
source('~/School/Coursera/DataScience/R/Week2/practice.R')
f()
source('~/School/Coursera/DataScience/R/Week2/practice.R')
myplot(rnorm(12),rnorm(12))
myplot(rnorm(12),rnorm(12))
.
...
args(paste)
args(cat)
args(c)
c(1,2,3)
c(1,2,3,recursive=T)
paste('a','b',sep=";")
paste('a','b','c',sep=";")
add2 <- function(x, y) {
x+y
}
add2(3,5)
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
above10(2:20)
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
above(2:12,7)
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
above(2:12)
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
airquality
columnmean(airquality)
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
columnmean(airquality)
columnmean(airquality,F)
x <- 12
methods(x)
methods(numeric)
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
source('~/School/Coursera/DataScience/R/Week2/firstRfunction.R')
columnmean(airquality,F)
columnmean(airquality)
search()
stats
stats()
package:stats
library('stats')
stats
stats()
methods(stats)
a <- available.packages()
head(a)
head(rownames(a))
head(rownames(a),20)
length(a)
head(rownames(a),200)
install.packages("slidify")
install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
ggplot2
install.packages("devtools")
library(devtools)
install.packages("KernSmooth")
library(KernSmooth)
pnorm(-.1)
dnorm(-.1)
pnorm(-1)
dnorm(-1)
qnorm(-1)
dnorm(-0)
qnorm(.95)*75+1100
qnorm(.95)
qnorm(.95)*75/10+1100
.5^5*(1+5)
1/12/sqrt(1000)
dpoisson(0)
dpois
ppois(1,5)
ppois(10,15)
ppois(0,15)
plot(1:50,ppois(1:50,15))
plot(1:50,ppois(1:50,15))
sqrt(1/12)
sqrt(1/12)/sqrt(1000)
sqrt(1/12)/sqrt(100)
library(caret)
data(faithful)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,p=.5,list=F)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col='blue')
lm1 <- lm(eruptions~waiting,data=faithful)
lm1
summary(lm1)
lm1 <- lm(eruptions~waiting,data=trainFaithful)
lm1 <- lm(eruptions~waiting,data=trainFaith)
lm1
summary(lm1)
lines(trainFaith$waiting,lm1$fitted,lwd=3)
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
newdata
par(mfrow=c(1,2))
plot(testFaith$waiting,testFaith$eruptions,pch=19,col='blue')
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
modFit <- train(eruptions~waiting, data=trainFaith,method='lm')
summary(modFit$finalModel)
library(ISLR)
library(ggplot2)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=.7,list=F)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age",'education','jobclass')],y=training$wage,plot='pairs')
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
modFit <- train(wage~age+jobclass+education,method='lm',data=training)
finMod <- modFit$finalModel
modFit
plot(finMod,1,pch=19,cex=.5,col='#000010')
plot(finMod,1,pch=19,cex=.5,col='#000010')
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
pred <- predict(modFit,testing)
qplot(wage,pred,colour=year,data=testing)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
head(diagnosis)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data.frame(diagnosis,predictors)
adData=data.frame(diagnosis,predictors)
dim(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
mixtures$CompressiveStrength
plot(mixtures$CompressiveStrength)
head(mixtures)
plot(mixtures$CompressiveStrength,pch=19,colour=mixtures$FlyAsh)
args(plot)
plot(mixtures$CompressiveStrength,pch=19,color=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength,pch=19,col=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength,pch=19,c=mixtures$FlyAsh)
plot(mixtures$Age,mixtures$CompressiveStrength,pch=19)
plot(mixtures$FlyAsh,mixtures$CompressiveStrength,pch=19)
plot(mixtures$Age,mixtures$CompressiveStrength,pch=19)
plot(mixtures$FlyAsh,mixtures$CompressiveStrength,pch=19)
head(mixtures)
plot(mixtures$CompressiveStrength,pch=19)
hist(mixtures$Superplasticizer)
log(2.67)
log(mixtures$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(adData)
"abc"[0]
"abc"[1]
"abc"[1:2]
substr("abc",1,2)
source('~/.active-rstudio-document')
substr(names(adData),1,2)=="IL"
ILs <- names(adData)[substr(names(adData),1,2)=="IL"]
print(ILs)
head(training)
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
print(preObj)
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
print(M)
M>.8
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
preProc
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
trainPC
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
trainPC
names(training)
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
confusionMatrix(testing$diagnosis, predict(modelFit,testPC))
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
preProc
source('~/School/Coursera/DataScience/R/Quiz2/alzheimer.R')
colors
icolors
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
colors
icolors
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
icolors = data.frame(West='red',Northeast='blue','North Central'='yellow',South='green')
colors = as.character(lapply(icolors, function(x) as.character(x)))
regions=c('West','Northeast','North Central','South')
colors
icolors
inputcboxes=c('West','South')
data(state)
state.region
state.region %in% input$cboxes
state.region %in% inputcboxes
state.abb
state.region
state.region %in% input$cboxes
state.region[state.region %in% inputcboxes]
colors[state.region[state.region %in% inputcboxes]]
colors['South']
colors
icolors['South']
icolors[state.region[state.region %in% inputcboxes]]
state.region[state.region %in% inputcboxes]
icolors
class(icolors)
icolors['West']
icolors['South']
icolors[state.region[state.region %in% inputcboxes]]
state.region[state.region %in% inputcboxes]
class(state.region[state.region %in% inputcboxes])
as.character(state.region[state.region %in% inputcboxes])
icolors[as.character(state.region[state.region %in% inputcboxes])]
as.character(icolors[as.character(state.region[state.region %in% inputcboxes])])
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
icolors[as.character(state.region[state.region %in% inputcboxes])]
class(icolors[as.character(state.region[state.region %in% inputcboxes])])
dim(icolors[as.character(state.region[state.region %in% inputcboxes])])
icolors[as.character(state.region[state.region %in% inputcboxes])][1,]
dim(icolors[as.character(state.region[state.region %in% inputcboxes])][1,])
dim(icolors[as.character(state.region[state.region %in% inputcboxes])][[1,]])
icolors[as.character(state.region[state.region %in% inputcboxes])][[1,]]
icolors[as.character(state.region[state.region %in% inputcboxes])]
icolors[[as.character(state.region[state.region %in% inputcboxes])]]
c(a=12)
c(West='red')
c(West='red',Northeast='blue','North Central'='yellow',South='green')
c(West='red',Northeast='blue','North Central'='yellow',South='green')['North Central']
c(West='red',Northeast='blue','North Central'='yellow',South='green')[North.Central]
c(West='red',Northeast='blue','North Central'='yellow',South='green')$North.Central
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?checkboxGroupInput
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?selectInput
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?lm
lm(state$Population,state$Area)
daata(state)
data(state)
lm(state$Population,state$Area)
state$Area
lm(state.x77$Population,state.x77$Area)
lm(state.x77$Population,state.x77['Area'])
lm(state.x77['Population'],state.x77['Area'])
lm(state.x77['Population']~state.x77['Area'])
lm(state.x77[,'Population']~state.x77[,'Area'])
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
lm(state.x77[,'Population']~state.x77[,'Area'])
reg1 <- lm(state.x77[,'Population']~state.x77[,'Area'])
reg1
class(reg1)
reg1[1]
lm
reg1
equation(reg1)
attributes(reg1)
summary(fit)
summary(reg1)
attributes(summary(reg1))
summary(reg1)$r.squared
paste('y=',12)
paste('y=',12,sep='')
paste('y=',reg1$coefficients[[1]],sep='')
paste('y=',reg1$coefficients[[1]],"x+",reg1$coefficients[[2]],sep='')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
reg1$coefficients
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
summary(reg1)$r.squared
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
round
round(.00001,3)
signif(.00001,3)
signif(.000012345,3)
signif(.000012395,3)
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?state
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?table
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?plot
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
?state.x77
shiny::runApp('School/Coursera/DataScience/DDP/ShinyState')
library(shinyapps)
getwd()
setwd('School//Coursera/DataScience//DDP/ShinyState/')
runApp()
?runApp
runApp(display.mode='showcase')
shiny::runApp()
getwd()
setwd('..')
getwd()
library(slidify)
author('ShinyStateSlidify')
subtitle    : Coursera: Developing Data Products
subtitle    : Coursera\: Developing Data Products
subtitle    : Coursera- Developing Data Products
subtitle    : Developing Data Products
